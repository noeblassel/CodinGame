A small Python program which takes a Python script file as input and outputs a translitterated version of it in the form:
exec(bytes(<translitterated source code string>,"u16")[2:])
This works by taking the raw (utf-8 encoded) bytes from the source file and reinterpreting them as utf-16 bytes, with at most one byte of padding.
The net effect will be to shorten- as measured by number of characters- source code which is at least 52 ASCII chars long.
The intended use case is for CodeGolf competitions which are measured by char count (as on CodinGame.com)

Here, the translitterating program has been self-translitterated.
The original code is easily recovered:

  import sys
  s=open(sys.argv[1],'r').read()
  b=bytes(s+'#'*(len(s)%2),'u8').decode('u16')
  open("M"+sys.argv[1],'w').write(f"exec(bytes('{b}','u16')[2:])")

Usage:
 python cc.py <source file>
 Outputs:
 M<source file>, a translitterated version of <source file>
